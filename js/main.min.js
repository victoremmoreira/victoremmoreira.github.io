// main.min.js - versão legível e organizada
(function () {
  'use strict';

  // Mapa de classes de botão (apenas os necessários)
  const BUTTON_CLASS_MAP = {
    SOCIAL: 'link-redesocial',
    DEFAULT: '',
    HIGHLIGHT: 'link-titulo-destaque',
    HIGHLIGHT_WITH_IMAGE: 'link-titulo-destaque link-com-foto'
  };

  // Dados dos links. Use chaves curtas e claras: title, href, icon, type, image (opcional)
  const LINKS = [
    { title: '📝 Questionário de Perfil do Jogador', href: 'https://victoremmoreira.github.io/Questionario_Bartle.html', icon: '▶️', type: 'HIGHLIGHT' },
  { title: '📰 Integrative Model of Player Classifications - DatJournal', href: 'https://datjournal.anhembi.br/dat/article/view/908', icon: '📚', type: 'HIGHLIGHT_WITH_IMAGE', image: { jpg: 'images/datjournal-cover.jpg', alt: 'Capa do Modelo Integrativo' } },
    { title: '📚 Design de jogos analógicos: história, tipos, mecânicas e desenvolvimento', href: 'https://a.co/d/fXRc88R', icon: '🎲', type: 'HIGHLIGHT' }
  ];

  // Renderiza toda a lista de links dentro do container #link-list
  function renderLinkList() {
    const container = document.getElementById('link-list');
    if (!container) return;
    container.innerHTML = '';

    LINKS.forEach((item, index) => {
      const anchor = document.createElement('a');
      anchor.href = item.href;
      anchor.target = '_blank';
      anchor.rel = 'noopener noreferrer';
      anchor.id = 'link-' + (index + 1);

      const buttonClass = BUTTON_CLASS_MAP[item.type] || BUTTON_CLASS_MAP.DEFAULT;
      anchor.className = 'link-button ' + buttonClass;

      // Se houver imagem, montar um <picture> com data-src para lazy loading
      if (item.image && (item.type === 'HIGHLIGHT_WITH_IMAGE')) {
        const picture = document.createElement('span');
        picture.className = 'link-image-wrapper';

        // Monte a tag picture manualmente como string para facilitar o uso de data-src
        const webpSrc = item.image.webp || '';
        const jpgSrc = item.image.jpg || '';
        const altText = item.image.alt || item.title;

        let pictureHtml = '';
        pictureHtml += '<picture>';
        if (webpSrc) pictureHtml += '<source data-srcset="' + webpSrc + '" type="image/webp">';
        if (jpgSrc) pictureHtml += '<source data-srcset="' + jpgSrc + '" type="image/jpeg">';
        pictureHtml += '<img data-src="' + (jpgSrc || webpSrc) + '" alt="' + altText + '" class="profile-image" loading="lazy" decoding="async" onerror="this.onerror=null;this.src=\'https://placehold.co/400x150/383838/ffffff?text=IMAGEM\';">';
        pictureHtml += '</picture>';

        picture.innerHTML = pictureHtml;

        const titleSpan = document.createElement('span');
        titleSpan.className = 'link-title';
        titleSpan.textContent = item.icon + ' ' + item.title;

        anchor.appendChild(picture);
        anchor.appendChild(titleSpan);
      } else {
        // Apenas texto + emoji
        anchor.innerHTML = '<span class="icon">' + item.icon + '</span><span class="link-title">' + item.title + '</span>';
      }

      container.appendChild(anchor);
    });

    initLazyLoading();
  }

  // Lazy-load de imagens que usam data-src / data-srcset (suporta <source data-srcset>)
  function initLazyLoading() {
    const images = document.querySelectorAll('img[data-src], source[data-srcset]');
    if (!images || images.length === 0) return;

    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver((entries, obs) => {
        entries.forEach(entry => {
          if (!entry.isIntersecting) return;
          const node = entry.target;
          if (node.tagName.toLowerCase() === 'img' && node.dataset.src) {
            node.src = node.dataset.src;
            node.removeAttribute('data-src');
          }
          if (node.tagName.toLowerCase() === 'source' && node.dataset.srcset) {
            node.srcset = node.dataset.srcset;
            node.removeAttribute('data-srcset');
          }
          obs.unobserve(node);
        });
      }, { rootMargin: '100px' });

      images.forEach(img => observer.observe(img));
    } else {
      // Fallback simples
      images.forEach(node => {
        if (node.tagName.toLowerCase() === 'img' && node.dataset.src) node.src = node.dataset.src;
        if (node.tagName.toLowerCase() === 'source' && node.dataset.srcset) node.srcset = node.dataset.srcset;
      });
    }
  }

  // Inicialização
  document.addEventListener('DOMContentLoaded', renderLinkList);

})();
